#+title: readme

Statically typed wrapper for nim ast at compile (~NimNode~) and rutime
(~PNode~). Another take on solving problem of ~node[0][0][1][0]~. Mostly
concerned with processing of types and procedure declarations. Provides
helper API for working with nimble packages.

* Installation

* Links

- [[https://github.com/haxscramper/hnimast][github]]
- [[https://haxscramper.github.io/hnimast-doc/src/hnimast.html][documentation]]
- [[https://discord.gg/hjfYJCU][discord server]]

* Description

Provides logical structure for objects/fields - you can set/get type,
check if field is a switch for case statement or not. Visit
~eachField~ in the object, map object to some code structure.

#+begin_src nim :exports both
  import hnimast, hnimast/obj_field_macros
  import hpprint

  let node = """
  type Type = object
    hello: float
  """.parsePNodeStr()

  var obj = parseObject(node, parsePPragma)

  echo "# ~~~~ make object exported ~~~~ #"

  obj.exported = true
  echo obj.toNNode()


  echo "# ~~~~ internal structure of object ~~~~ #"
  pprint obj
#+end_src

#+RESULTS:
#+begin_example
# ~~~~ make object exported ~~~~ #
Type* = object
  hello: float

# ~~~~ internal structure of object ~~~~ #
Object[ast.PNode, Pragma[ast.PNode]]
  exported:   true
  annotation:
    Option[Pragma[ast.PNode]]
      val: Pragma[ast.PNode](kind: oakCaseOfBranch, elements: [])
      has: false
  name:
    NType[ast.PNode]
      kind:      ntkIdent
      head:      "Type"
      genParams: []
  flds:
    - ObjectField[ast.PNode, Pragma[ast.PNode]]
        annotation:
          Option[Pragma[ast.PNode]]
            val:
              Pragma[ast.PNode]
                kind:     oakCaseOfBranch
                elements: []
            has: false
        value:      Option[ast.PNode](val: <nil tree>)
        exported:   false
        isTuple:    false
        name:       "hello"
        fldType:
          NType[ast.PNode]
            kind:      ntkIdent
            head:      "float"
            genParams: []
        isKind:     false
#+end_example

- working with enums
  - ~parseEnumImpl~ - parse as enum implementation. Tested on alias,
    symbol, value, enum-as-generic-parameter, ~typedesc[Enum]~ etc.
  - ~getEnumPref~ - for [[https://nim-lang.org/docs/nep1.html#introduction-naming-conventions][NEP-conforming]] enums (~prefixEnumValueName~)
    get ~prefix~
  - ~getEnumNames~ - get list of all enum names
  - ~enumNames~ - macro. Generate ~seq[string]~ of names for all
    enums.
- working with object declarations
  - ~ObjectBranch~, ~Object~ and ~ObjectField~ types - wrappers on top
    of nim object declarations. Supports arbitrarily named case
    fields, annotations for objects etc. Currently does not cover all
    possible cases.
  - ~eachField~ - visit each field in object
  - ~eachField~ - recursively generate ~case~ expression for each
    possible and use insert result of callback for each field. For use
    case example see [[file:tests/tHnimAst.nim]]
  - can be conveted to and from ~NimNode~
  - ~eachCase~ - generate case statement for object's kind fields
  - ~eachParallelCase~ - generate case statement for two object's kind
    fields.
  - ~eachPath~
- working with object values
  - ~ObjTree~ - 'stringly typed' representation of object value.
    mainly used in ~hpprint~, but due to dependency reasons type
    definitions is still here.


* Contribution & development

If you have any question about implementation, API etc. you can join
my [[https://discord.gg/hjfYJCU][discord server]] and ask there.
